//Q1
#include<stdio.h>
 main()
 {
   int i,j,p,r,alloc[10][10],need[10][10],max[10][10],available[10];
   printf("\n Enter the how many process you want:");
   scanf("%d",&p);
   printf(" Enter the how many resources you want:");
   scanf("%d",&r);
   printf("\n Enter the allocation matrix:\n");
   for(i=0;i<p;i++)
    {

     printf(" P%d\t",i);
      for(j=0;j<r;j++)
       scanf("%d",&alloc[i][j]);
    }
   printf("\n Enter the maximum demand of matrix:\n");
   for(i=0;i<p;i++)
    {
     printf(" P%d\t",i);
      for(j=0;j<r;j++)
       scanf("%d",&max[i][j]);
    }
   printf("\n Enter the available resource matrix: ");
   for(i=0;i<r;i++)
     {
       scanf("%d",&available[i]);
       
     }
   printf("\n The contents of need array is:");
   for(i=0;i<p;i++)
    {
     printf("\n P%d",i);
      for(j=0;j<r;j++)
       {
	 need[i][j]=max[i][j]-alloc[i][j];
	 printf("\t%d",need[i][j]);
       }
    }
printf("\n The contents Allocation Matrix:");
   for(i=0;i<p;i++)
    {
     printf("\n P%d",i);
      for(j=0;j<r;j++)
       {
	 printf("\t%d",alloc[i][j]);
       }
    }
printf("\n The contents Max Matrix is:");
   for(i=0;i<p;i++)
    {
     printf("\n P%d",i);
      for(j=0;j<r;j++)
       {
	 printf("\t%d",max[i][j]);
       }
    }
printf("\n The contents Available Matrix is:");
   for(i=0;i<r;i++)
     {
             
	 printf("\t%d",available[i]);
       }
    
}
//Q2
// Scan disk scheduling
#include<stdio.h>
int main()
{
    int RQ[100],i,j,n,TotalHeadMoment=0,initial,size,move,temp;

    printf("\n Enter the number of Requests : ");
    scanf("%d",&n);

    printf("\n Enter the Requests sequence : ");
    for(i=0;i<n;i++)
	{
	    scanf("%d",&RQ[i]);
	}
	
	printf("\n Enter initial head position : ");
    scanf("%d",&initial);
    
	printf("\n Enter total disk size : ");
    scanf("%d",&size);
    
	printf("\n Enter the head movement direction for high 1 and for low 0 : ");
    scanf("%d",&move); 
    
    for(i=1;i<n;i++)
    {
        for(j=0;j<n-i;j++)
        {
            if(RQ[j]>RQ[j+1])
            {
                temp=RQ[j];
                RQ[j]=RQ[j+1];
                RQ[j+1]=temp;
            }
        }
    }

    int index;
    for(i=0;i<n;i++)
    {
        if(initial<RQ[i])
        {
            index=i;
            break;
        }
    }

    if(move==1)
    {
        for(i=index;i<n;i++)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }

        TotalHeadMoment=TotalHeadMoment+abs(size-RQ[i-1]-1);
        initial = size-1;
        
        for(i=index-1;i>=0;i--)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    else
    {
        for(i=index-1;i>=0;i--)
        {
            TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
            initial=RQ[i];
        }

        TotalHeadMoment=TotalHeadMoment+abs(RQ[i+1]-0);
        initial =0;
        
        for(i=index;i<n;i++)
        {
             TotalHeadMoment=TotalHeadMoment+abs(RQ[i]-initial);
             initial=RQ[i];
            
        }
    }
    
    printf("\n Total head movement is : %d",TotalHeadMoment);
    
	return 0;
}
